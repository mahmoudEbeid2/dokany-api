generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(cuid())
  user_name           String     @unique
  f_name              String
  l_name              String
  email               String     @unique
  phone               String
  city                String
  governorate         String
  country             String
  role                String
  subdomain           String?    @unique
  payout_method       String?
  password            String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  logo                String?
  profile_imge        String?
  theme_id            String?
  image_public_id     String?
  categories          Category[]
  coupons             Coupon[]
  customers           Customer[]
  payouts             Payout[]
  products            Product[]
  theme               Theme?     @relation(fields: [theme_id], references: [id])
}

model Customer {
  id                  String     @id @default(cuid())
  user_name           String     @unique
  f_name              String
  l_name              String
  email               String     @unique
  phone               String
  city                String
  governorate         String
  country             String
  password            String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  seller_id           String
  image_public_id     String?
  profile_imge        String?
  cart                Cart[]
  seller              User       @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  favorites           Favorite[]
  orders              Order[]
  reviews             Review[]
}

model Product {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  discount    Float
  stock       Int
  status      String
  seller_id   String
  category_id String?
  cart        Cart[]
  coupons     Coupon[]
  favorites   Favorite[]
  images      Image[]
  items       OrderItem[]
  category    Category?   @relation(fields: [category_id], references: [id], onDelete: Cascade)
  seller      User        @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  reviews     Review[]
}

model Image {
  id              String  @id @default(cuid())
  product_id      String
  image           String
  image_public_id String?
  product         Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Order {
  id                String      @id @default(cuid())
  total_price       Float
  order_status      String
  payment_reference String
  customer_id       String
  date              DateTime    @default(now())
  customer          Customer    @relation(fields: [customer_id], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  order_id   String
  product_id String
  quantity   Int
  price      Float
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Coupon {
  id              String   @id @default(cuid())
  code            String   @unique
  discount_value  Float
  expiration_date DateTime
  product_id      String
  seller_id       String
  product         Product  @relation(fields: [product_id], references: [id])
  seller          User     @relation(fields: [seller_id], references: [id], onDelete: Cascade)
}

model Payout {
  id            String   @id @default(cuid())
  amount        Float
  status        String
  payout_method String
  seller_id     String
  date          DateTime @default(now())
  seller        User     @relation(fields: [seller_id], references: [id], onDelete: Cascade)
}

model Theme {
  id            String @id @default(cuid())
  name          String
  preview_image String
  users         User[]
}

model Cart {
  id          String   @id @default(cuid())
  quantity    Int
  customer_id String
  product_id  String
  final_price Float
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Favorite {
  id          String   @id @default(cuid())
  customer_id String
  product_id  String
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Review {
  id          String   @id @default(cuid())
  comment     String
  rating      Int
  customer_id String
  product_id  String
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(cuid())
  name      String
  image     String
  seller_id String
  seller    User      @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  products  Product[]
}
